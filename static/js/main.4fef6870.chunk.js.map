{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","requeste","url","options","fetch","then","response","ok","json","Promise","reject","Error","PostsList","props","selectedUserId","handleVisibleDetail","useState","postData","getPostsOfUser","selectedPost","getSelectedPost","useEffect","data","userId","className","length","map","post","title","type","onClick","event","id","preventDefault","console","log","handleOpenButton","NewCommentForm","detailedPostId","name","setName","email","setEmail","body","setBody","onSubmit","postId","method","headers","JSON","stringify","addNewComment","placeholder","value","onChange","target","PostDetails","postDetail","getPostDetail","comments","getComments","isCommentsChange","setCommentChange","isCommentsVisible","setCommentsVisibility","removeComment","a","prevState","filter","commentItem","comment","App","users","showUsers","getUserId","isVisibleDetails","setDetailsVisibility","setDetailedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fef6870.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const requeste = (url: string, options = {}) => (\n  fetch(`${BASE_URL}${url}`, options)\n    .then(response => (response.ok\n      ? response.json()\n      : Promise.reject(new Error('Some error message')))));\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts, getAllPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Props = {\n  selectedUserId: number;\n  // isVisibleDetails: boolean;\n  handleVisibleDetail : (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, handleVisibleDetail } = props;\n  const [postData, getPostsOfUser] = useState<any>([]);\n  // const [isButtonClose, setButtonStatus] = useState(isVisibleDetails);\n  const [selectedPost, getSelectedPost] = useState(0);\n\n  useEffect(() => {\n    getAllPosts().then((data) => getPostsOfUser(data));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId !== 0) {\n      getUserPosts(selectedUserId).then((data) => getPostsOfUser(data));\n    }\n  }, [selectedUserId]);\n\n  const handleOpenButton = (event: React.MouseEvent<HTMLButtonElement>, id: number) => {\n    event.preventDefault();\n    // setButtonStatus(prevStatus => !prevStatus);\n    if (!selectedPost) {\n      getSelectedPost(id);\n    } else {\n      getSelectedPost(0);\n    }\n\n    handleVisibleDetail(id);\n    /* eslint-disable-next-line */\n    console.log(id);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {!postData.length ? 'Oops, this user is still thinking about his posts)' : postData.map((post: Post) => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>\n                [User\n                {post.userId}\n                ]:\n              </b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={(event) => handleOpenButton(event, post.id)}\n            >\n              {selectedPost !== post.id ? 'Open' : 'Close'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { requeste } from './api';\n\nexport const getAllPosts = () => requeste('/posts');\n\nexport const getUserPosts = (userId: number) => requeste(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: number) => requeste(`/posts/${postId}`);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addNewComment } from '../../api/comments';\n\ntype Props = {\n  detailedPostId: number;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { detailedPostId } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleCommentForm = (event: React.FormEvent) => {\n    event.preventDefault();\n    addNewComment(detailedPostId, name, email, body);\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleCommentForm}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { requeste } from './api';\n\nexport const getPostComments = () => requeste('/comments/');\n\nexport const deletePostComment = (commentId: number) => requeste(`/comments/${commentId}`, { method: 'DELETE' });\n\nexport const addNewComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => requeste(`/comments?postId=${postId}`,\n  {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deletePostComment } from '../../api/comments';\nimport './PostDetails.scss';\n\ntype Props = {\n  detailedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { detailedPostId } = props;\n  const [postDetail, getPostDetail] = useState({} as Post);\n  const [comments, getComments] = useState([] as Comment[]);\n  const [isCommentsChange, setCommentChange] = useState(true);\n  const [isCommentsVisible, setCommentsVisibility] = useState(true);\n\n  const removeComment = async (event: React.MouseEvent<HTMLButtonElement>, id: number) => {\n    event.preventDefault();\n    deletePostComment(id);\n    setCommentChange(prevState => (!prevState));\n  };\n\n  useEffect(() => {\n    if (detailedPostId !== 0) {\n      getPostDetails(detailedPostId)\n        .then((data) => getPostDetail(data));\n    }\n\n    getPostComments()\n      .then((data: Comment[]) => getComments(data\n        .filter(commentItem => commentItem.postId === detailedPostId)));\n  }, [isCommentsChange, postDetail, isCommentsVisible]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetail.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setCommentsVisibility(prevState => (!prevState))}\n        >\n          Hide&nbsp;\n          {comments.length}\n          &nbsp;comments\n        </button>\n        <ul className=\"PostDetails__list\">\n          {isCommentsVisible && comments.map(comment => comment.body !== '' && (\n            <li key={comment.id} className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={(event) => removeComment(event, comment.id)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm detailedPostId={detailedPostId} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, showUsers] = useState<User[]>([]);\n  const [selectedUserId, getUserId] = useState(0);\n  const [isVisibleDetails, setDetailsVisibility] = useState(false);\n  const [detailedPostId, setDetailedPostId] = useState(0);\n\n  const handleVisibleDetail = (id: number) => {\n    setDetailsVisibility(prevState => !prevState);\n    setDetailedPostId(id);\n  };\n\n  const handleSelectOptions = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    event.preventDefault();\n    getUserId(+event.target.value);\n  };\n  /* eslint-disable-next-line */\nconsole.log(selectedUserId);\n\n  useEffect(() => {\n    getUsers().then(data => showUsers(data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleSelectOptions}\n          >\n            {users.map(user => (\n              <option key={user && user.id} value={user && user.id}>{user && user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            // isVisibleDetails={isVisibleDetails}\n            handleVisibleDetail={handleVisibleDetail}\n          />\n        </div>\n\n        {isVisibleDetails && (\n          <div className=\"App__content\">\n            <PostDetails detailedPostId={detailedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { requeste } from './api';\n\nexport const getUsers = () => requeste('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}